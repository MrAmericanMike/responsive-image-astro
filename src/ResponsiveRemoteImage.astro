---
import type { ImageOutputFormat } from "astro";
import { getImage, type RemoteImageProps } from "astro:assets";

type Props = RemoteImageProps & {
	src: string;
	format?: ImageOutputFormat;
	breakpoints: number[];
	width: number;
	height: number;
	quality?: number;
};

async function generateResponsiveImage({ src, format, breakpoints, width, height, quality }: Omit<Props, "alt">) {
	if (!src) {
		throw new Error("Responsive remote image missing required parameter src");
	}

	if (!breakpoints || !breakpoints.length) {
		throw new Error("Responsive remote image missing required parameter breakpoints");
	}

	const imageFormat = format || "webp";

	const imgSrcSet = breakpoints.map(async (breakpoint) => {
		const HEIGHT = (breakpoint * height) / width;
		const image = await getImage({
			src,
			width: breakpoint,
			height: HEIGHT,
			format: imageFormat,
			quality: quality ?? 75
		});
		return `${image.src} ${breakpoint}w`;
	});
	const imgSrc = await getImage({
		src,
		width,
		height,
		format: imageFormat,
		quality: quality ?? 75
	});
	return {
		srcSet: await Promise.all(imgSrcSet),
		imgSrc: imgSrc.src
	};
}

const { src, breakpoints, format, width, height, quality } = Astro.props;
const { srcSet, imgSrc } = await generateResponsiveImage({ src, breakpoints, format, width, height, quality });
const PROPS: any = Astro.props;

delete PROPS.src;
delete PROPS.breakpoints;
delete PROPS.format;
delete PROPS.quality;
---

<img {...PROPS} src={imgSrc} srcset={srcSet.join(", ")} />
